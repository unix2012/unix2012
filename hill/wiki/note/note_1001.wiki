%title 一行力

 === 一行力 ===
<center>就是能用一行字表达的能力。</center>
----

_注：其实是毫无逻辑地瞎想……_

- 简约明朗，自然优雅。
- 重要的是基本原则。
- 先是思想，其次是方法，工具是辅助。剑不胜人，剑法胜于人。
- 专注是提高工作效率的最有效方法。
- 不要一味地表述自己 —— 不自信或者是心虚。 
- 很多方法需要实践才能得出真正结论。 
- 必须随身带纸笔，保持记录状态。 
- 思考、作事，都要清晰、符合逻辑，才能在关键时刻有作用。
- 很多工作，做好计划就去实行。
- 按照自己的节奏处理事情，不要被别人的工作节奏带乱。
- 工作日志能提升脑容量。
- 重构是程序员的主力技能。 
- 先用profiler调查，才有脸谈优化。 
- 注释贵精不贵多。杜绝大姨妈般的“例注”。漫山遍野的碎碎念注释，实际就是背景噪音。 
- 单元测试总是合算的。 
- 不要先写框架再写实现。最好反过来，从原型中提炼框架。 
- 代码结构清晰，其它问题都不算事儿。 
- 好的项目作风硬派，一键测试，一键发布，一键部署; 烂的项目生性猥琐，口口相传，不立文字，神神秘秘。 
- 编程之事，隔离是方向，起名是关键，测试是主角，调试是补充，版本控制是后悔药。 
- 一行代码一个兵。形成建制才能有战斗力。单位规模不宜过大，千人班，万人排易成万人坑。 
- 重构/优化/修复Bug，同时只能作一件。 
- 简单模块注意封装，复杂模块注意分层。 
- 人脑性能有限，整洁胜于杂乱。读不懂的代码，尝试整理下格式; 不好用的接口，尝试重新封装下。 
- 迭代速度决定工作强度。想多快好省，就从简化开发流程，加快迭代速度开始。 
- 忘掉优化写代码。过早优化等同恶意破坏；忘掉代码作优化。优化要基于性能测试，而不是纠结于字里行间。 
- 最好的工具是纸笔；其次好的是markdown。 
- leader问任务时间，若答不上来，可能是任务拆分还不够细。 
- 宁可多算一周，不可少估一天。过于「乐观」容易让boss受惊吓。 
- 最有用的语言是English。其次的可能是Python。 
- 百闻不如一见。画出结果，一目了然。调试耗时将大大缩短。 
- 资源、代码应一道受版本管理。资源匹配错误远比代码匹配错误更难排查。 
- 不要基于想象开发， 要基于原型开发。原型的价值是快速验证想法，帮大家节省时间。 
- 序列化首选明文文本 。诸如二进制、混淆、加密、压缩等等有需要时再加。 
- 编译器永远比你懂微观优化。只能向它不擅长的方向努力。 
- 不要定过大、过远、过细的计划。即使定了也没有用。 
- 至少半数时间将花在集成上。时间，时间，时间总是不够。 
- 与主流意见/方法/风格/习惯相悖时，先检讨自己最可靠。 
- Git是最棒的。简单，可靠，免费。 
- 仅对“可预测的非理性”抛断言。 
- Log要写时间与分类。并且要能重定向输出。 
- 注释是稍差的文档。更好的是清晰的命名。让代码讲自己的故事。 
- 造轮子是很好的锻炼方法。前提是你见过别的轮子。 
- code review最好以小组/结对的形式。对业务有一定了解，建议会更有价值（但不绝对）。而且不会成为负担。管理员个人review则很容易成team的瓶颈。 
- 提问前先做调研。问不到点上既被鄙视，又浪费自己的时间。 

